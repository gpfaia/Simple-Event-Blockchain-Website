{"version":3,"sources":["SubmitData.js","App.js","SetTarget.js","PendingTransactions.js","navBar.js","serviceWorker.js","index.js"],"names":["TicketInformationForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","e","setState","defineProperty","target","name","value","state","sendEmail","receiveEmail","Seat","EventId","loading","getSubmit","bind","assertThisInitialized","_this$state","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","event","render","preventDefault","createTicket","then","_this$state2","react_default","a","createElement","onSubmit","id","type","min","step","src","alt","Component","BlockChainView","props","getBlockChain","res","json","bc","getLastBlock","block","blockChain","lastBlock","_this2","interval","setInterval","clearInterval","className","map","key","index","border","timeStamp","previousHash","data","nonce","hash","SetTarget","getTarget","targetNum","newTargetNum","max","PendingTransactions","checked","changeArray","push","parseInt","indexOf","splice","getTransactionArray","transactionArray","targetCheck","finalTransactions","elem","generateNextBlock","response","status","updateTransactionArr","_this3","_this4","transaction","length","NavBar","HashRouter","NavLink","to","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","navBar","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d73fadc0.chunk.js","sourcesContent":["import React, { Component } from 'react';\n//import './App.css';\n\n\nclass TicketInformationForm extends Component {\n  constructor() {\n    super();\n    this.state = { sendEmail: \"\", receiveEmail: \"\", Seat: \"\", EventId: 0, loading: false };\n    this.getSubmit = this.getSubmit.bind(this);\n  }\n\n  onChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  createTicket() {  \n    let {sendEmail, receiveEmail, Seat, EventId } = this.state;\n    return fetch('/bc/api/createTicket', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({sendEmail, receiveEmail, Seat, EventId}),\n      })\n    }\n\n  getSubmit(event) {\n    this.setState({ loading: true });\n    this.render();\n    event.preventDefault();\n    this.createTicket().then(this.setState({ loading: false }))\n    ;\n  }\n\n  render() {\n    let { sendEmail, receiveEmail, Seat, EventId, loading } = this.state;\n    return (\n      <div>\n        <div>\n        <h3>Create Transaction</h3>\n        <form onSubmit={this.getSubmit}>\n          <label>Sender Email</label>\n          <input id=\"sender\" name=\"sendEmail\" \n            value={sendEmail}\n            onChange={this.onChange}\n            type=\"email\" />\n          <label >Receiver Email</label>\n          <input id=\"receiver\" name=\"receiveEmail\"\n            value={receiveEmail}\n            onChange={this.onChange}\n            type=\"email\" />\n          <label>Seat</label>\n          <input id=\"seat\" name=\"Seat\"\n            value={Seat}\n            onChange={this.onChange}\n            type=\"text\" />\n          <label>EventId </label>\n          <input id=\"eventId\" name=\"EventId\" \n            value={EventId}\n            onChange={this.onChange}\n            type=\"number\" min=\"0\" step=\"1\" />\n          <button>Generate New Pending Transaction</button> \n          {loading ? <img src=\"/images/loading.gif\" alt=\"\"/> : <div></div>}\n        </form></div>\n      </div>\n    );\n  }\n}\n\nexport default TicketInformationForm;","import React, { Component } from 'react';\nimport './App.css';\n\nclass BlockChainView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { blockChain: [], lastBlock: \"\" };\n  }\n  \n  getBlockChain = () => {\n    fetch('/bc/api/getBlockChain')\n      .then(res => res.json())\n      .then(bc => this.setState(bc));\n  }\n\n  getLastBlock = () => {\n    fetch('/bc/api/getlastblock')\n      .then(res => res.json())\n      .then(block => this.setState(block));\n  }\n\n  componentDidMount() {\n    this.getBlockChain()\n    this.interval = setInterval(() => this.getBlockChain(), 3000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <div className=\"BlockChainView\">\n        <h1>Block Chain</h1>\n        {this.state.blockChain.map(block =>\n        <table key={block.index} border=\"1\"><tbody>\n        <tr><th>Index</th><td>{block.index}</td></tr>\n        <tr><th>Time Stamp</th><td>{block.timeStamp}</td></tr>\n        <tr><th>Previous Hash</th><td>{block.previousHash}</td></tr>\n        <tr><th>Tix Data</th><td>{block.data}</td></tr>\n        <tr><th>Nonce</th><td>{block.nonce}</td></tr>\n        <tr><th>Hash</th><td>{block.hash}</td></tr>\n        </tbody></table>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default BlockChainView;","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass SetTarget extends Component {\r\n  constructor() {\r\n    super();\r\n    this.getSubmit = this.getSubmit.bind(this);\r\n    this.state = { targetNum: \"\", newTargetNum: \"\" };\r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n}\r\n\r\n  getSubmit(event) {\r\n    event.preventDefault();\r\n    let newTargetNum = this.state.newTargetNum;\r\n    fetch('/bc/api/setTarget', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({newTargetNum}),\r\n    })\r\n    .then(this.getTarget())\r\n    \r\n  }\r\n\r\n  getTarget = () => {\r\n    fetch('/bc/api/getTarget')\r\n      .then(res => res.json())\r\n      .then(targetNum => this.setState(targetNum));\r\n    }\r\n\r\n  componentDidMount() {\r\n      this.getTarget()\r\n  }\r\n\r\n  render() {\r\n    const { targetNum, newTargetNum } = this.state;\r\n    return (\r\n      <div>\r\n        <h5>Current Target: {targetNum}</h5>\r\n        <p>The target is the amount of zeros a hash needs to start with to be valid </p>\r\n        <h6>Set Target</h6>\r\n        <form onSubmit={this.getSubmit}>\r\n          <input \r\n            id=\"newTargetNum\" \r\n            name=\"newTargetNum\" \r\n            type=\"number\"\r\n            min=\"0\" \r\n            max=\"10\" \r\n            step=\"1\"\r\n            value={newTargetNum}\r\n            onChange={this.onChange} />\r\n          <button>Submit</button>\r\n        </form>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default SetTarget;","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass PendingTransactions extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { transactionArray: [], changeArray: [], targetCheck: false };\r\n    this.getSubmit = this.getSubmit.bind(this);\r\n  }\r\n  \r\n  onChange = (e) => {\r\n    let index\r\n    if (e.target.checked) {\r\n      this.state.changeArray.push(parseInt(e.target.value));\r\n    } else {\r\n      index = this.state.changeArray.indexOf(parseInt(e.target.value));\r\n      this.state.changeArray.splice(index, 1)\r\n    }\r\n    this.setState({ changeArray: this.state.changeArray })\r\n  }\r\n\r\n  getTransactionArray = () => {\r\n    fetch('/bc/api/getTransactionArray')\r\n      .then(res => res.json())\r\n      .then(transactionArray => this.setState(transactionArray));\r\n  }\r\n\r\n  generateNextBlock(data) {  \r\n    return fetch('/bc/api/generateNextBlock', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(data),\r\n      })\r\n    }\r\n\r\n  updateTransactionArr(data) {\r\n    return fetch('/bc/api/updateTransactionArray', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(data),\r\n      })\r\n    }\r\n\r\n  getSubmit(event) {\r\n    event.preventDefault();\r\n    const finalTransactions =  this.state.changeArray.map(elem => this.state.transactionArray[elem])\r\n    this.generateNextBlock(finalTransactions).then(response => \r\n      {if (response.status !== 200) {\r\n        this.setState({ targetCheck: true })\r\n      } else {\r\n        this.updateTransactionArr(this.state.changeArray)\r\n          .then(this.setState({ changeArray: [], targetCheck: false})\r\n        );\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    this.getTransactionArray()\r\n    this.interval = setInterval(() => this.getTransactionArray(), 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"PA\">\r\n        <h1>Pending Transactions</h1>\r\n        <form onSubmit={this.getSubmit}>\r\n        {this.state.transactionArray.map((transaction, index) =>\r\n          <div>\r\n            <label>{transaction}</label>\r\n            <input type=\"checkbox\" name={index} value={index} onChange={this.onChange}/>\r\n          </div>\r\n        )}\r\n        { this.state.transactionArray.length > 0 ? <button>Mine!</button> :  null}\r\n        </form>\r\n        {this.state.targetCheck && <div><p>UNABLE TO MINE!</p> \r\n        <p>Retry with less transactions or a smaller target</p></div>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PendingTransactions;","import React, { Component } from 'react';\r\nimport {Route, NavLink, HashRouter } from \"react-router-dom\";\r\nimport TicketInformationForm from \"./SubmitData\";\r\nimport BlockChainView from \"./App\";\r\nimport SetTarget from \"./SetTarget\";\r\nimport PendingTransactions from \"./PendingTransactions\";\r\n\r\n\r\nclass NavBar extends Component {\r\n  render() {\r\n    return (\r\n        <HashRouter>\r\n        <div>\r\n          <ul className=\"header\">\r\n            <li><NavLink to=\"/ticketInfo\">Ticket Exchange</NavLink></li>\r\n            <li><NavLink to=\"/PendingTransactions\">View Pending Transactions</NavLink></li>\r\n            <li><NavLink to=\"/blockChainView\">Block Chain</NavLink></li>\r\n            <li><NavLink to=\"/setTarget\">Change Target</NavLink></li>\r\n          </ul>\r\n          <div className=\"content\">\r\n            <Route exact path=\"/\" component={TicketInformationForm}/>\r\n            <Route path=\"/ticketInfo\" component={TicketInformationForm}/>\r\n            <Route path=\"/PendingTransactions\" component={PendingTransactions}/>\r\n            <Route path=\"/blockChainView\" component={BlockChainView}/>\r\n            <Route path=\"/setTarget\" component={SetTarget}/>\r\n          </div>\r\n        </div>\r\n        </HashRouter>\r\n    );\r\n  }\r\n}\r\n \r\nexport default NavBar;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport NavBar from '././navBar';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<NavBar />, document.getElementById('root'));\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}